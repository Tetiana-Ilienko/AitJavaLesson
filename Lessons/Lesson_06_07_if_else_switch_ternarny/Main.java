public class Main {
    /*
    Конструкция if ... else
    Одним из фундаментальных элементов многих языков программирования являются условные конструкции или их еще называют
    "условными операторами".

    Данные конструкции позволяют направить работу программы по одному из путей в зависимости от выполнения определенных
    условий.

    В языке Java используются следующие условные конструкции:

    if () { ... } else { ... }

    switch..case

    тернарный оператор*/

    /** Выражение if ... else проверяет истинность некоторого условия и в зависимости от результатов проверки выполняет
     определенный код:*//*

    int num1 = 6; int num2 = 4;

    if( num1 - num2 > 0 ){ System.out.println("Первое число" + num1 + " больше второго " + num2); }

    После ключевого слова if в круглых скобках ставится условие. Если это условие выполняется, то выполняется код,
    который помещен в далее в блоке if после фигурных скобок. В качестве условия выступает, например, операция
    сравнения двух чисел, а в целом - любое логическое выражение.

    Так как, в данном случае первое число больше второго, то выражение num1 - num2 > 0 истинно и возвращает
    значение true. Следовательно, управление переходит в блок кода после фигурных скобок и начинает выполнять
    содержащиеся там инструкции, а конкретно System.out.println("Первое число больше второго");.
    Если бы первое число оказалось бы меньше второго или равно ему, то инструкции в блоке if не выполнялись бы и
    программа перешла на строку после фигурной скобки.
    Если мы захотим, чтобы при несоблюдении условия также выполнялись какие-либо действия, то в этом случае мы можем
    добавить блок else:

           int num1 = 6; int num2 = 4;
           if( num1 > num2 )
           { System.out.println("Первое число больше второго");
           }
             else { System.out.println("Первое число меньше второго"); }

    Но при сравнении чисел мы можем насчитать три состояния: первое число больше второго,
                                                             первое число меньше второго и числа равны.
    С помощью выражения else if, мы можем обрабатывать три (и даже более!) вариантов:

             int num1 = 6; int num2 = 8;
             if( num1 > num2 ) {
                System.out.println("Первое число больше второго");
             }
             else if( num1 < num2 ){
             System.out.println("Первое число меньше второго"); }
               { else { System.out.println("Числа равны"); }

      Также мы можем соединить сразу несколько условий, используя логические операторы:

              int num1 = 8; int num2 = 6;
              if( num1 > num2 && num1 > 7 ){
              System.out.println("Первое число больше второго и больше 7"); }

      Здесь блок if будет выполняться, если num1 > num2 равно true и одновременно num1 > 7 равно true.*/

    /** Конструкция switch case*//* (может реализовать множественный выбор)
     Конструкция switch ... case аналогична конструкции if ...else, так как позволяет обработать сразу несколько условий:

              int week_day = 1;
            switch(week_day){

              case 1: {
                     System.out.println("Понедельник - день тяжелый!");
                     break;
                        }
             case 2: {
                     System.out.println("Вторник - пора готовится к работе.");
                     break;
                        }
             case 3:{
                     System.out.println("Среда - так и быть будем работать...");
                     break;}
               ...
             default:{
                     System.out.println("Такого дня недели нет.");
                        }

      После ключевого слова switch в скобках идет сравниваемое выражение. Значение этого выражения
      последовательно сравнивается со значениями, помещенными после операторов сase. И если совпадение найдено,
      то будет выполняться соответствующий блок сase. В конце блока сase ставится оператор break,
      чтобы избежать выполнения других блоков.*/

    /**
     * Тернарный оператор
     *//*
      Тернарный оператор имеет следующий синтаксис:
      [первый операнд c условием] ? [второй операнд] : [третий операнд];

      Таким образом, в этой операции участвуют сразу три операнда. В зависимости от условия тернарная операция
      возвращает второй или третий операнд: если условие равно true, то возвращается второй операнд; если условие равно false, то третий.

      Например:

                     int x=3;
                     int y=2;
                     int z = (x < y ) ? ( x + y ) : ( x - y);
                     System.out.println( z );

       Здесь результатом тернарной операции является переменная z. Сначала проверяется условие x<y.
       И если оно соблюдается, то z будет равно второму операнду - (x+y), иначе z будет равно третьему операнду.
     */
    public static void main(String[] args) {
          /*
           Имеется целое число n, задайте его самостоятельно в программе. Выясните, является ли это число четным?
           Является ли это число кратным 3? Кратным 5? Кратным 10?
           */
        int n = 18;
        int i = 9;
        int j = 15;

        if (n % 2 == 0) {
            System.out.println("Die Zahl ist gerade");
        } else {
            System.out.println("Die Zahl ist ungerade");
        }
        if (i % 3 == 0) {
            System.out.println("Die Zahl ist mehrere 3");
        } else {
            System.out.println("Die Zahl ist unmehrere 3");
        }
        if (j % 5 == 0) {
            System.out.println("Die Zahl ist mehrere 5 ");
        } else {
            System.out.println("Die Zahl ist unmehrere 5");
        }

           /*
           Имеются два целых числа k и m, задайте их самостоятельно в программе. Выясните, является ли хотя бы одно
           из них отрицательным?
            */
        int k = -2;
        int m = 3;
        if (k < 0 || m < 0) {
            System.out.println();
        } else {
            System.out.println();
        }
        /*
        Задание 3. Даны 3 целых числа 10, 3 и 2 - длины отрезков. Проверьте, можно ли из них составить треугольник
        или нельзя?
         /*
        Для проверки, можно ли из данных чисел составить треугольник, можно использовать неравенство треугольника,
        которое утверждает, что сумма длин любых двух сторон треугольника всегда должна быть больше длины третьей стороны.
         */
        int t1 = 10;
        int t2 = 3;
        int t3 = 2;

        if (t1 < (t2 + t3) && t2 < (t1 + t3) && t2 < (t1 + t2)){
            System.out.println();
        }else {
            System.out.println();
        }

        /*

        Задание 4. Задайте в программе число myGuess в интервале от 1 до 5. Затем для переменной n вызовите датчик
        случайных в интервале от 1 до 5. int n = (int)(Math.random() * (b - a + 1) + a) - генерирует случайное целое
        число в интервале [a, b] a может быть и b тоже может быть. Проверьте, угадали ли вы число, которое выдал датчик
        случайных чисел.*/

        int myGuess = 4;
        int b = 1;
        int a = 5;
        int ns = (int)(Math.random() * (b - a + 1) + a);

        if(myGuess==ns){
            System.out.println();
        }else{
            System.out.println();
        }

       /* Задание 5. Реализуйте простой калькулятор с четырьмя действиями, используя switch ... case*/

        int d = 23;
        int c = 47;
        String action = "+";

       switch (action) {
           case "+" : {
               System.out.println(d+c);
               break;
           }
           case  "-" : {
               System.out.println(d-c);
               break;
           }
           case  "*" : {
               System.out.println(d*c);
               break;
           }
           case "/" : {
               System.out.println((double) (d/c));
               break;
           }
           default:{
               System.out.println(" Kein action");
           }
       }


        /*Задание 6. Определите модуль целого числа с помощью тернарного оператора. Целое число задайте случайным
        образом в интервале от -10 до 10.

         */
        int a1=-10;
        int b1= 10;

        int result = (int)(Math.random() * (b1-a1+1) + a1);
        int abcN = result > 0 ? result : -result;



    }
}
