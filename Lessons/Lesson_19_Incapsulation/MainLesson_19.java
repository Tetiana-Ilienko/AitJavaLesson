// Инкапсуляция.
/*
  С сокрытием данных нам помогают:

модификаторы доступа (private, protected, package default);
геттеры и сеттеры
В Java используются следующие модификаторы доступа:

public: публичный, общедоступный класс или член класса. Поля и методы, объявленные с модификатором public,
видны всем классам из текущего пакета и из внешних пакетов.
private: закрытый класс или член класса, противоположность модификатору public. Закрытый класс или член класса
доступен только из кода в том же классе.
protected: такой класс или член класса доступен из любого места в текущем классе или пакете или в производных классах,
даже если они находятся в других пакетах
package default - Модификатор по умолчанию. Отсутствие модификатора у поля или метода класса предполагает применение к
нему модификатора по умолчанию. Такие поля или методы видны всем классам в текущем пакете.
Авторы разных статей об инкапсуляции имеют в виду либо инкапсуляцию (объединение данных и методов), либо сокрытие,
либо и то, и другое. В Java присутствуют оба механизма (в других ООП-языках это не обязательно так), так что последний
вариант будет наиболее правильным.

Использование инкапсуляции дает нам несколько важных преимуществ:

Контроль за корректным состоянием объекта. Примеры этому были выше: благодаря сеттеру и модификатору private, мы
обезопасили нашу программу от котов с весом 0.
Удобство для пользователя за счет интерфейса. Мы оставляем «снаружи» для доступа пользователя только методы.
Ему достаточно вызвать их, чтобы получить результат, и совсем не нужно вникать в детали их работы.
Изменения в коде не отражаются на пользователях. Все изменения мы проводим внутри методов. На пользователя
это не повлияет: он как писал auto.gas() для газа машины, так и будет писать. А то, что мы поменяли что-то в
работе метода gas() для него останется незаметным: он, как и раньше, просто будет получать нужный результат.



 */
public class MainLesson_19 {
    public static void main(String[] args) {
        Cat cat = new Cat();
        cat.whoAmI();
        cat.setName("Barsik");
        cat.setAge(3);
        cat.setWeight(5);

        System.out.println("Имя " + cat.getName());
        System.out.println("Возраст " + cat.getAge());
        System.out.println("Вес " + cat.getWeight());


    }
}
