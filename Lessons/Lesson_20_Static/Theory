В языке программирования Java ключевым словом static помечают члены (поля или методы), которые принадлежат классу, а не экземпляру этого класса. Это означает, что какое бы количество объектов вы не создали, всегда будет создан только один член, доступный для использования всеми экземплярами класса. Ключевое слово static применимо к переменным, методам, блокам инициализации, импорту и вложенным классам (nested classes).

Статические поля (переменные класса)
В языке Java, если поле объявляется статическим (путем добавления модификатора static), то в независимости от количества созданных объектов класса — всегда будет существовать только один экземпляр статического поля. Значение такого поля будет единым и общим для всех объектов класса, содержащих это поле.

Предположим, у нас есть класс Car с несколькими атрибутами (полями). Каждый экземпляр данного класса будет иметь свою, отличающуюся от других копию этих переменных экземпляра. Значения таких полей можно менять в объектах независимо друг от друга.

А теперь предположим, что нам требуется переменная-счетчик для хранения количества созданных объектов Car, которая являлась бы общей для всех его экземпляров. При этом необходимо, чтобы каждый из них имел к ней доступ и мог изменять.

Тут-то нам и пригодится статическая переменная

public class Car {

   static int numberOfCars;

   String name;
   int powerPS;

   public Car(String name, int powerPS) {
       this.name = name;
       this.powerPS = powerPS;
       numberOfCars++;
   }

   public static void main(String[] args) {
       Car car1 = new Car("BMW", 220);
       Car car2 = new Car("Seat", 95);

       System.out.println("Всего машин: " + Car.numberOfCars);

       // OUTPUT: Всего машин: 2
   }
}
Для каждого объекта этого класса будет увеличиваться один и тот же экземпляр переменной numberOfCars

Причины использовать статические поля:

Когда значение поля должно быть общим для всех объектов класса, в котором оно определено
Когда значение поля не зависит от наличия объектов класса, в котором оно определено
Когда значение поля может быть изменено из любого объекта класса, в котором оно определено
Особенности использования:

Статические переменные могут быть созданы только, как переменные класса.
К статическим полям класса можно получить доступ без создания объекта, используя имя класса (ссылка на объект не нужна)
Несмотря на то, что получить доступ к статическим полям можно с помощью ссылки на объект (например, car1.numberOfCars), мы должны воздерживаться от её применения, поскольку в этом случае становится не совсем понятно, является ли эта переменная переменной экземпляра или же переменной класса. Вместо этого всегда необходимо ссылаться на статические переменные, используя имя класса (например, Car.numberOfCars)
Статические методы (методы классов)
Подобно статическим полям, статические методы также принадлежат классу, а не объекту, поэтому их можно вызывать без создания экземпляра класса, в котором они находятся. При этом следует помнить, что из статического метода можно получить доступ только к статическим членам (переменным или к другим статическим методам.)

public class Test {
   int x;

   public static void main(String[] args) {
       x = 0;
   }
}
Ошибка компиляции: java: non-static variable x cannot be referenced from a static context

Статические методы обычно используются для выполнения операции, не зависящей от создания экземпляра. При этом, они широко используются для создания служебных (утилитных) или вспомогательных классов, поскольку их можно вызывать без создания нового объекта этих классов.

public class MathUtils {
   public static int sumOfInts(int i, int...nums) {
       int sum = i;
       for(int num : nums) {
           sum += num;
       }
       return sum;
   }
}

public class Main19 {
   public static void main(String[] args) {
       System.out.println("Сумма: " + MathUtils.sumOfInts(1, 2, 3));
   }
}
В JDK служебные классы активно используются: Collections, Math, Arrays; StringUtils из Apache или CollectionUtils из Spring framework. Все методы этих классов являются статическими.

Причины использовать статические методы

Для доступа / управления статическими переменными и другими статическими методами, которые не зависят от объектов
Для служебных, вспомогательных классов и интерфейсов, поскольку не требуют создания объектов и соответственно, обеспечивают большую производительность
Когда методу требуется доступ лишь к статическим полям класса
Особенности использования:

Статические методы не могут использовать ключевые слова this или super
Методы экземпляра могут обращаться непосредственно как к методам экземпляра, так и к переменным экземпляра
Методы экземпляра также могут непосредственно обращаться к статическим переменным и статическим методам
Статические методы могут обращаться ко всем статическим переменным и другим статическим методам
Статические методы не могут напрямую обращаться к переменным экземпляра и методам экземпляра. Для этого им нужна ссылка на объект
Статические поля и методы не являются потокобезопасными.
Статические методы связываются во время компиляции, в отличие от не статических методов, которые связываются во время исполнения.
Абстрактные методы не могут быть статическими
Статический блок инициализации
Статический блок используется для инициализации статических переменных. Хотя статические переменные могут быть инициализированы непосредственно во время объявления, бывают ситуации, когда нам требуется выполнить многострочную обработку. В таких случаях пригодятся статические блоки. Либо, если статические переменные во время инициализации требуют дополнительной логики, состоящей из нескольких операторов, то также можно использовать статический блок.

public class StaticBlockDemo {
   static String[] strings;

   static {
       strings = new String[4];
       strings[0] = "Max";
       strings[1] = "John";
       strings[2] = "Alex";
       strings[3] = strings[2] + " / " + strings[1];
   }
}
Особенность статических блоков — они выполняются раньше конструкторов и при создании нескольких объектов класса, статический блок выполняется только один раз.

Причины использовать статические блоки

Если для инициализации статических переменных требуется дополнительная логика, за исключением операции присваивания
Если инициализация статических переменных подвержена ошибкам и требует обработки исключений
Особенности использования:

У класса может быть несколько статических блоков
Статические поля и статические блоки выполняются в том же порядке, в котором они присутствуют в классе
Из статического блока нельзя получить доступ к не статическим членам класса
Статический блок не может пробросить дальше перехваченные исключения, но может их выбросить. При этом всегда будет выкидываться только java.lang.ExceptionInInitializerError
Статические поля или переменные инициализируются после загрузки класса в память в том же порядке, в каком они описаны в классе

final
В java есть ключевое слово – final. Оно может применяться к классам, методам, переменным (в том числе аргументам методов).

Для переменных примитивного типа это означает, что однажды присвоенное значение не может быть изменено.

Для ссылочных переменных это означает, что после присвоения объекта, нельзя изменить ссылку на данный объект. Это важно! Ссылку изменить нельзя, но состояние объекта изменять можно.

Для класса это означает, что класс не сможет иметь подклассов, т.е. запрещено наследование. Это полезно при создании immutable (неизменяемых) объектов, например, класс String объявлен, как final.

Следует также отметить, что к абстрактным классам (с ключевым словом abstract), нельзя применить модификатор final, т.к. это взаимоисключающие понятия.

Для метода final означает, что он не может быть переопределен в подклассах. Это полезно, когда мы хотим, чтобы исходную реализацию нельзя было переопределить.

Константы
Говоря о ключевом слове static, нельзя не упомянуть о его применении в определении констант — переменных, которые никогда не изменяются. Для определения константы необходимо добавить модификаторы «static final» к полю класса.

Константы — это статические финальные поля, содержимое которых неизменно. Это относится к примитивам, String, неизменяемым типам и неизменяемым коллекциям неизменяемых типов. Если состояние объекта может измениться, он не является константой.

Модификатор static делает переменную доступной без создания экземпляра класса, а final делает ее неизменяемой. При этом нужно помнить, что если мы сделаем переменную только static, то ее легко можно будет изменить, обратившись к ней через имя класса. Если переменная будет иметь только модификатор final, то при создании каждого экземпляра класса она может быть проинициализирована своим значением. Соответственно, используя совместно модификаторы static и final, переменная остается статической и может быть проинициализирована только один раз.

В Java константой считается не та переменная, которую нельзя изменить в рамках одного объекта, а та, которую не могут изменить ни один экземпляр класса в котором она находится (такая переменная создается и инициализируется один раз для всех экземпляров, сколько бы их не было).