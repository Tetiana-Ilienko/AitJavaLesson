С вероятностью 99,9% между классами в наших приложениях будут существовать некая связь

В ООП выделяют два вида связей между классами:

IS-A является
HAS-A имеет
Autobus IS-A Vehicle
Driver IS-A Person
Passenger IS-A Person
Autobus HAS-A RegistrationDoc
Autobus HAS-A Driver
Autobus HAS-A Passengers
В объектно-ориентированных языках программирования существует три способа организации взаимодействия между классами

Наследование
Агрегация
Композиция
Наследование — это когда класс-наследник имеет все поля и методы родительского класса, и, как правило, добавляет какой-то новый функционал и/или поля. Наследование основывается на связи IS-A «является».

Наследование в коде программы обозначается ключевым словом extends. Также следует знать, что класс от которого наследуются называется родителем (родительским классом, класс-родитель). Класс, который наследует, соответственно класс-потомок.

public class Car extends Vehicle{

   private final int passengersCount;
   private int  mileage;

   public Car(String model, int year, int passengersCount) {
       super(model, year);
       this.passengersCount = passengersCount;
       this.mileage = 10000;
   }
Вынесение общих состояний и поведения (полей и методов) в класс-родитель позволит нам сэкономить кучу времени и места.

Если же у какого-то типа есть свойства или методы, уникальные только для него и отсутствующие у других типов машин, — не беда. Их всегда можно создать в классе-потомке, отдельно от всех остальных.

Важно! В Java нет множественного наследования. Каждый класс может наследоваться только от одного класса